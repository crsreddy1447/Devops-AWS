*****************ANSIBLE******

1. To automate the deployment process.
2. It uses PUSH method ---> Master/server contact Nodes (Server ---> Nodes)
3. Agent Less
3. Credentials are required for login.
4. Playbooks, Playbooks
5. YAML File script
6. Python has to be installed on Nodes for working with nodes.
7. Python on node and server should be of same version
8. By default Python gets installed when we install Ansible on server.
9. Ansible Control Server must be a Linux machine.

****Lab Process****
3 linux machines => Ubuntu 16

1 => Ansible control sever
	enable password based authentication
					(/etc/ssh/sshd_config )
					service sshd restart
	user => ansible  => adduser
	                    visudo
	install ansible
	
	
2 => python is present or not (install)
     enable password based authentication
  => user => ansible
  
  key based authentication b/w acs and node for ansible user
  
  1 ACS
      => Generate keys => Public & Private Key
	     ssh-keygen
		 ssh-copy-id
  
  
  ssh -i <pathofkey> username@<ipaddress/hostname>

*******WORKING STEPS*****

*/*/*/*/*/**********ON ANSIBLE CONTROL SERVER******/*/*/*/*

1. Linux machine (Ubuntu 16) in AWS

$ sudo apt-get update -y

$ sudo -i  ----> to become a root user

***Enable Authentication applicable only for using AWS VM instance***
$ vi /etc/ssh/sshd_config
Check for PasswordAuthentication whether yes or no.
   ---> PasswordAuthentication - yes
   
$ service sshd restart ---> to restart the service after PasswordAuthentication 

$ service sshd status  ---> to check the status of ssh

****Add User****
$ adduser <user name>
Ex: adduser ansiblemaster

****Key based Authentication****
$ visudo
Edit some code. first check for this
%sudo ALL=(ALL:ALL) ALL

ansiblemaster ALL=(ALL:ALL) NOPASSWD:ALL ----> add this step below and save.

$ exit

***** Install ANSIBLE on machine****
$ su ansiblemaster

$ Cd ~

$ sudo apt-get update  

$ sudo apt-get install software-properties-common

$ sudo apt-add-repository ppa:ansible/ansible

$ sudo apt-get update

$ sudo apt-get install ansible 

$ sudo apt-get update -----> Now ANSIBLE CONTROL SERVER is ready to work



*/*/*/*/*/******ON ANSIBLE NODE******/*/*/*/*  
  
1. Linux machine (Ubuntu 16) in AWS

$ sudo apt-get update -y

$ sudo -i  ----> to become a root user

***Enable Authentication applicable only for using AWS VM instance***
$ vi /etc/ssh/sshd_config   
          or
$ nano /etc/ssh/sshd_config
Check for PasswordAuthentication whether yes or no.
   ---> PasswordAuthentication - yes
   
$ service sshd restart ---> to restart the service after PasswordAuthentication 

$ service sshd status  ---> to check the status of ssh

****Add User****
$ adduser <user name>
Ex: adduser ansiblenode1

password: raja

****Key based Authentication****
$ visudo
Edit some code. first check for this
%sudo ALL=(ALL:ALL) ALL

ansiblenode1 ALL=(ALL:ALL) NOPASSWD:ALL ----> add this step below and save.

$ exit

***** Install Python on machine****
$ su ansiblenode1
password: raja  
 
$ Cd ~

$ sudo apt-get update  

$ sudo apt-get install software-properties-common

$ sudo apt-add-repository ppa:ansible/ansible

$ sudo apt-get update

$ sudo apt-get install python

$ python --version

$ exit  


****Connect with server or node***

$ ssh ansibleserver@<Public/Private IP>
EX: ssh ansibleserver@172.31.84.158  ---> to connect with server
    ssh ansiblenode1@172.31.90.85  ----> to connect with node

	
*/*/*/Key Bades Authentication between ACS and NODE (to overcome password everytime)/*/*/*	

Master/server need the credentials to copied on NODES.

$ ssh-keygen  ---> to generate a key pair (pub, pem)

$ ls .ssh  ----> to list the keys files

****Copy Public key from Server to Nodes*****
$ ssh-copy-id <node name>@<private DNS>
Ex: ssh-copy-id ansiblenode1@ip-172-31-90-85.ec2.internal

Number of key(s) added: 1
this means key successfully added to node.

*** Note: ssh key also has to be copied into master also.

Now try connecting the node, it should not ask the password

*****Own HOST FILE****
Add IP address to host file for communication

$ vi hosts1  # creating own host file instead of default host (/etc/ansible/hosts)

add this. This is also called as inventory file
HOSTS1 file
ansibleserver@172.31.84.158
[webserver]
ansiblenode1@172.31.90.85
[appserver]
ansiblenode2@172.31.89.227

$ ansible -i <hostfile> -m ping all
EX: ansible -i hosts1 -m ping all
    ansible -i hosts1 -m ping webserver
	
	




*/*/*/*/*/*/*/****PlayBook YML file *****/*/*/*/*/*/*/

Required fields

1. host ----> where to install (Ex: On appserver/webserver/all)
2. become ----> sudo required or not
3. task ----> what task to be performed
4. loop ----> Used for executing multiple same statements

Basic yaml

---
-  hosts: all
   become: yes
   task
   -  name: install git
      apt:
        name:git
        state: present
        update_cache: yes 


*/*/*/*/*/***ADHOC COMMAND****/*/*/*/
To write playbook into adhoc command

Ex: ansible -m service -a "name = apache2 state = restarted enabled = yes"
	ansible -m apt -a "name = git state = present update_cache = yes"	

???????????? HOW TO RUN ON MULTIPLE OS ????????????????	
/*/*/*/*/******Conditional Statements****/*/*/*/
This is used to run different commands on different machines.
Ex: apt can be runned on debain. Yum can be runned on RHEL.
To overcome this we use conditional statement.
Ex condition: when: ansible_Os_family =="Debain"
              when: ansible_Os_family =="Redhat"
	when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "6") or
    ansible_distribution == "Debian" and ansible_distribution_major_version == "7")

---
-  hosts: all
   become: yes
   task
   -  name: install git
      apt:
        name:git
        state: present
        update_cache: yes
      when: ansible_Os_family =="Debain"
   -  name: install git
      apt:
        name:git
        state: present
        update_cache: yes		
      when: ansible_Os_family =="Redhat"
      
/*/*/*//******Package installation Method*****/*/*/*/*/

package - Generic OS package manager

---
-  hosts: all
   become: yes
   task
   -  name: install git
      package
        name:git
        state: present
		
/*/*/*/*****LOOP Concepts******/*/*/*/		
EX: Without LOOPS
- name: add user testuser1
  user:
    name: "testuser1"
    state: present
    groups: "wheel"
- name: add user testuser2
  user:
    name: "testuser2"
    state: present
    groups: "wheel"
	
LOOP Program:
- name: add several users
  user:
    name: "{{ item }}"
    state: present
    groups: "wheel"
  loop:
     - testuser1
     - testuser2	

??????????? HOW TO PASS VALUE ????????????????????????	 
/*/*/*/*/*****Variable Concepts****/*/*/*/*/***
EX:
---
-  hosts: all
   become: yes
   vars:
     package_name:
   tasks:    
   - name: install {{package_name}}
      package
        name: "{{package_name}}"
        state: present 

How to pass variable value in command line
EX: ansible-playbook release.yml -e "version=1.23.45 other_variable=foo"
    
--> ansible-playbook -i -v <hostfile> <YML file name> -e "<defined var>=<value>"
EX: ansible-playbook -i -v hosts raja.yml -e "package_name=apache2"
** -e =extra-vars
** -v, -vv = verbose




	

		